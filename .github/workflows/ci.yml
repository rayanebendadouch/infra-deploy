name: my_ci_script
on:
    push:
        branches:
            - master

env:
    AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY}}
    AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS}}
    aws_ssh_public_key: ${{secrets.AWS_SHH_PUBLIC}}
    aws_ssh_private_key: ${{secrets.AWS_SSH_PRIVATE}}

jobs:
    deploy_infra:
        runs-on: ubuntu-latest
        outputs:
            server_public_ip: ${{steps.myoutput.outputs.public_ip}}
        steps:
            - name: checkout
              uses: actions/checkout@v2
            - name: install-terraform
              uses: hashicorp/setup-terraform@v3
              with:
                terraform_wrapper: false
            - name: terraform-init
              id: init
              run: terraform init
              working-directory: ./terraform
            - name: plan
              id: plan
              run: |
               terraform plan \
               -var="public_key=$aws_ssh_public_key" \
               -var="private_key=$aws_ssh_private_key" \
               -var="key_name=my_rayankey" \
               -out=plane
              working-directory: ./terraform
            - name: apply
              id: apply
              run: terraform apply plane
              working-directory: ./terraform
            - name: set-output
              id: myoutput
              run: echo "::set-output name=public_ip::$(terraform output instance_public_ip)"

    deploy-app:
        runs-on: ubuntu-latest
        needs: deploy_infra
        steps:
            - name: checkout
              uses: actions/checkout@v2
            - name: set_public_ip
              run: echo ec2_public_ip=${{needs.deploy_infra.outputs.server_public_ip}} >> $GITHUB_ENV
            - name: login to aws ecr
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@v2
            - name: build,push image
              env:
                REGISTRY: ${{steps.login-ecr.outputs.registry}}
                REPOSITORY: my-apps
                IMAGE_TAG: ${{github.sha}}
              run: |-
                docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
                docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
              working-directory: ./my-app
            - name: deploy-to-ec2
              env:
                REGISTRY: ${{steps.login-ecr.outputs.registry}}
                REPOSITORY: my-app
                IMAGE_TAG: ${{github.sha}}
                AWS_DEFAULT_REGION: us-east-1
              uses: appleboy/ssh-action@v1
              with:
                host: ${{ env.ec2_public_ip}}
                username: ubuntu
                key: $aws_ssh_private_key
                envs:  aws_ssh_private_key, AWS_ACCESS_KEY_ID,AWS_SECRET_ACCESS_KEY,REGISTRY,REPOSITORY,IMAGE_TAG,AWS_DEFAULT_REGION
                script: |-
                  sudo apt update
                  sudo apt install docker.io -y
                  sudo apt install awscli -y
                  sudo $(aws ecr get-login --no-includes-email --region us-east-1)
                  sudo docker pull $REGISTRY/$REPOSITORY:$IMAGE_TAG
                  sudo docker run -d -p 80:8080 $REGISTRY/$REPOSITORY:$IMAGE_TAG

              



            